const describe = require('mocha').describe
const before = require('mocha').before
const after = require('mocha').after
const it = require('mocha').it
const expect = require('chai').expect

const uhppoted = require('../index.js')
const ctx = require('./common.js').context
const setup = require('./common.js').setup
const teardown = require('./common.js').teardown

const requests = [
  // normal event
  Buffer.from([
    0x17, 0xb0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ]),

  // missing event
  Buffer.from([
    0x17, 0xb0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ]),

  // overwritten event
  Buffer.from([
    0x17, 0xb0, 0x00, 0x00, 0x90, 0x53, 0xfb, 0x0b, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ])
]

const replies = [
  // normal event
  Buffer.from([
    0x17, 0xb0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x1d, 0x00, 0x00, 0x00, 0x02, 0x01, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x19, 0x08, 0x03, 0x10, 0x34, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ]),

  // missing event
  Buffer.from([
    0x17, 0xb0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ]),

  // overwritten event
  Buffer.from([
    0x17, 0xb0, 0x00, 0x00, 0x90, 0x53, 0xfb, 0x0b, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  ])
]

describe('#getEvent(...)', function () {
  let sock = null

  before(function () {
    sock = setup(requests[0], [replies[0]])
  })

  after(function () {
    teardown(sock)
  })

  it('should execute get-event', function (done) {
    const expected = {
      deviceId: 405419896,
      event: {
        index: 29,
        type: {
          code: 2,
          event: 'door'
        },
        granted: true,
        door: 1,
        direction: {
          code: 1,
          direction: 'in'
        },
        card: 0,
        timestamp: '2019-08-03 10:34:29',
        reason: {
          code: 0,
          reason: '(reserved)'
        }
      }
    }

    uhppoted.getEvent(ctx, 405419896, 29)
      .then(response => {
        expect(response).to.deep.equal(expected)
        done()
      })
      .catch(err => done(err))
  })
})

describe('#getEvent(...) with missing event', function (done) {
  let sock = null

  before(function () {
    sock = setup(requests[1], [replies[1]])
  })

  after(function () {
    teardown(sock)
  })

  it("should return 'missing' error for get-event with index after last event", function (done) {
    uhppoted.getEvent(ctx, 405419896, 200)
      .then(response => {
        done(new Error('expected "405419896:200  event does not exist"'))
      })
      .catch(err => {
        expect(err.toString()).to.equal('Error: 405419896:200  event does not exist')
        done()
      })
  })

  it("should return 'missing' error for get-event with index after last event (internationalised)", function (done) {
    const alt = {
      config: ctx.config,
      locale: 'klingon'
    }

    uhppoted.getEvent(alt, 405419896, 200)
      .then(response => {
        done(new Error('expected "405419896:200  yav"'))
      })
      .catch(err => {
        expect(err.toString()).to.equal('Error: 405419896:200  yav')
        done()
      })
  })
})

describe('#getEvent(...) with overwritten event', function (done) {
  let sock = null

  before(function () {
    sock = setup(requests[2], [replies[2]])
  })

  after(function () {
    teardown(sock)
  })

  it("should return 'overwritten' error for get-event with index before first event", function (done) {
    uhppoted.getEvent(ctx, 201020304, 73)
      .then(response => {
        done(new Error('expected "201020304:73  event overwritten"'))
      })
      .catch(err => {
        expect(err.toString()).to.equal('Error: 201020304:73  event overwritten')
        done()
      })
  })

  it("should return 'overwritten' error for get-event with index before first event (internationalised)", function (done) {
    const alt = {
      config: ctx.config,
      locale: 'klingon'
    }

    uhppoted.getEvent(alt, 201020304, 73)
      .then(response => {
        done(new Error('expected "201020304:73  jup"'))
      })
      .catch(err => {
        expect(err.toString()).to.equal('Error: 201020304:73  jup')
        done()
      })
  })
})

describe('#getEvent(...) (TCP)', function () {
  const expected = {
    deviceId: 405419896,
    event: {
      index: 29,
      type: {
        code: 2,
        event: 'door'
      },
      granted: true,
      door: 1,
      direction: {
        code: 1,
        direction: 'in'
      },
      card: 0,
      timestamp: '2019-08-03 10:34:29',
      reason: {
        code: 0,
        reason: '(reserved)'
      }
    }
  }

  let sock = null

  before(function () {
    sock = setup(requests[0], [replies[0]], 'tcp')
  })

  after(function () {
    teardown(sock)
  })

  it('should execute get-event with address:port object', function (done) {
    uhppoted.getEvent(ctx, { id: 405419896, address: { address: '127.0.0.1', port: 59998 }, protocol: 'tcp' }, 29)
      .then(response => {
        expect(response).to.deep.equal(expected)
        done()
      })
      .catch(err => done(err))
  })

  it('should execute get-event with address:port string', function (done) {
    uhppoted.getEvent(ctx, { id: 405419896, address: '127.0.0.1:59998', protocol: 'tcp' }, 29)
      .then(response => {
        expect(response).to.deep.equal(expected)
        done()
      })
      .catch(err => done(err))
  })
})
