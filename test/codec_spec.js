const describe = require('mocha').describe
const it = require('mocha').it
const expect = require('chai').expect
const codec = require('../src/codec.js')
const opcodes = require('../src/opcodes.js')

describe('codec', function () {
  describe('#encode(...)', function () {
    it('should fail with error when encoding an invalid function code', function () {
      expect(() => { codec.encode(0xff) }).to.throw('invalid protocol function code 255')
    })

    it('should encode get-devices request', function () {
      const msg = Buffer.from([
        0x17, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.GetDevice)

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode get-device request', function () {
      const msg = Buffer.from([
        0x17, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.GetDevice, 405419896)

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode set-address request', function () {
      const msg = Buffer.from([
        0x17, 0x96, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x7d, 0xff, 0xff, 0xff, 0x00,
        0xc0, 0xa8, 0x00, 0x01, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.SetIP, 405419896, {
        address: '192.168.1.125',
        netmask: '255.255.255.0',
        gateway: '192.168.0.1'
      })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode get-status request', function () {
      const msg = Buffer.from([
        0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.GetStatus, 405419896)

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode get-listener request', function () {
      const msg = Buffer.from([
        0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.GetListener, 405419896)

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode set-listener request', function () {
      const msg = Buffer.from([
        0x17, 0x90, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0x61, 0xea, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.SetListener, 405419896, { address: '192.168.1.100', port: 60001 })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode get-time request', function () {
      const msg = Buffer.from([
        0x17, 0x32, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.GetTime, 405419896)

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode set-time request', function () {
      const msg = Buffer.from([
        0x17, 0x30, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x21, 0x08, 0x29, 0x13, 0x45, 0x51, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.SetTime, 405419896, { datetime: '2021-08-29 13:45:51' })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode get-door-control request', function () {
      const msg = Buffer.from([
        0x17, 0x82, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.GetDoorControl, 405419896, { door: 3 })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode set-door-control request', function () {
      const msg = Buffer.from([
        0x17, 0x80, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x02, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.SetDoorControl, 405419896, { door: 3, delay: 9, control: opcodes.NormallyClosed })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode open-door request', function () {
      const msg = Buffer.from([
        0x17, 0x40, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.OpenDoor, 405419896, { door: 3 })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode get-cards request', function () {
      const msg = Buffer.from([
        0x17, 0x58, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.GetCards, 405419896)

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode get-card request', function () {
      const msg = Buffer.from([
        0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa4, 0xea, 0xaa, 0x03, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.GetCardByID, 405419896, { card: 61532836 })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode get-card-by-index request', function () {
      const msg = Buffer.from([
        0x17, 0x5c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x9e, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.GetCardByIndex, 405419896, { index: 13726 })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode put-card request', function () {
      const msg = Buffer.from([
        0x17, 0x50, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa4, 0xea, 0xaa, 0x03, 0x20, 0x19, 0x01, 0x02,
        0x20, 0x21, 0x12, 0x31, 0x01, 0x1d, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.PutCard, 405419896, {
        card: 61532836,
        from: '2019-01-02',
        to: '2021-12-31',
        doors: {
          1: true,
          2: 29,
          3: false,
          4: true
        }
      })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode put-card request (with PIN)', function () {
      const msg = Buffer.from([
        0x17, 0x50, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa4, 0xea, 0xaa, 0x03, 0x20, 0x19, 0x01, 0x02,
        0x20, 0x21, 0x12, 0x31, 0x01, 0x1d, 0x00, 0x01, 0x6b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.PutCard, 405419896, {
        card: 61532836,
        from: '2019-01-02',
        to: '2021-12-31',
        doors: {
          1: true,
          2: 29,
          3: false,
          4: true
        },
        PIN: 7531
      })

      expect(bytes).to.deep.equal(msg)
    })

    it('should fail with error when encoding put-card with an invalid PIN', function () {
      expect(() => {
        codec.encode(opcodes.PutCard, 405419896, {
          card: 61532836,
          from: '2019-01-02',
          to: '2021-12-31',
          doors: {
            1: true,
            2: 29,
            3: false,
            4: true
          },
          PIN: 1000000
        })
      }).to.throw('invalid card keypad PIN 1000000')
    })

    it('should fail with error when encoding put-card with an invalid PIN (2)', function () {
      expect(() => {
        codec.encode(opcodes.PutCard, 405419896, {
          card: 61532836,
          from: '2019-01-02',
          to: '2021-12-31',
          doors: {
            1: true,
            2: 29,
            3: false,
            4: true
          },
          PIN: -1
        })
      }).to.throw('invalid card keypad PIN -1')
    })

    it('should fail with error when encoding put-card with an invalid PIN (3)', function () {
      expect(() => {
        codec.encode(opcodes.PutCard, 405419896, {
          card: 61532836,
          from: '2019-01-02',
          to: '2021-12-31',
          doors: {
            1: true,
            2: 29,
            3: false,
            4: true
          },
          PIN: 'qwerty'
        })
      }).to.throw('invalid card keypad PIN qwerty')
    })
    it('should encode delete-card request', function () {
      const msg = Buffer.from([
        0x17, 0x52, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa4, 0xea, 0xaa, 0x03, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.DeleteCard, 405419896, { card: 61532836 })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode delete-cards request', function () {
      const msg = Buffer.from([
        0x17, 0x54, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.DeleteCards, 405419896, { })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode get-time-profile request', function () {
      const msg = Buffer.from([
        0x17, 0x98, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.GetTimeProfile, 405419896, { profileId: 29 })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode set-time-profile request', function () {
      const msg = Buffer.from([
        0x17, 0x88, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x1d, 0x20, 0x21, 0x01, 0x01, 0x20, 0x21, 0x12,
        0x31, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x08, 0x30, 0x11, 0x15, 0x13, 0x15, 0x17, 0x45,
        0x19, 0x00, 0x20, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const profile = {
        id: 29,
        valid: {
          from: '2021-01-01',
          to: '2021-12-31'
        },
        weekdays: ['Monday', 'Tuesday', 'Friday'],
        segments: [
          { start: '08:30', end: '11:15' },
          { start: '13:15', end: '17:45' },
          { start: '19:00', end: '20:30' }
        ],
        linkedTo: 3
      }

      const bytes = codec.encode(opcodes.SetTimeProfile, 405419896, { profile: profile })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode clear-time-profiles request', function () {
      const msg = Buffer.from([
        0x17, 0x8a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.ClearTimeProfiles, 405419896, { })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode clear-task-list request', function () {
      const msg = Buffer.from([
        0x17, 0xa6, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.ClearTaskList, 405419896, { })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode add-task request', function () {
      const msg = Buffer.from([
        0x17, 0xa8, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x21, 0x01, 0x01, 0x20, 0x21, 0x12, 0x31,
        0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x08, 0x30, 0x03, 0x04, 0x11, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const task = {
        task: 5,
        door: 3,
        valid: {
          from: '2021-01-01',
          to: '2021-12-31'
        },
        weekdays: ['Monday', 'Tuesday', 'Friday'],
        start: '08:30',
        cards: 17
      }

      const bytes = codec.encode(opcodes.AddTask, 405419896, { task: task })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode refresh-task-list request', function () {
      const msg = Buffer.from([
        0x17, 0xac, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.RefreshTaskList, 405419896, { })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode record-special-events request', function () {
      const msg = Buffer.from([
        0x17, 0x8e, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.RecordSpecialEvents, 405419896, { enable: true })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode get-event-index request', function () {
      const msg = Buffer.from([
        0x17, 0xb4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.GetEventIndex, 405419896, { })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode set-event-index request', function () {
      const msg = Buffer.from([
        0x17, 0xb2, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x31, 0xd4, 0x00, 0x00, 0x55, 0xaa, 0xaa, 0x55,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.SetEventIndex, 405419896, { index: 54321 })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode get-event request', function () {
      const msg = Buffer.from([
        0x17, 0xb0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xde, 0x1d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.GetEvent, 405419896, { index: 73182 })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode set-pc-control request', function () {
      const msg = Buffer.from([
        0x17, 0xa0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x55, 0xaa, 0xaa, 0x55, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.SetPCControl, 405419896, { enable: true })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode set-interlock request', function () {
      const msg = Buffer.from([
        0x17, 0xa2, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.SetInterlock, 405419896, { interlock: 3 })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode activate-keypads request', function () {
      const msg = Buffer.from([
        0x17, 0xa4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.ActivateKeypads, 405419896, {
        keypads: {
          1: true,
          2: true,
          3: false,
          4: true
        }
      })

      expect(bytes).to.deep.equal(msg)
    })

    it('should encode activate-keypads request with partial list', function () {
      const msg = Buffer.from([
        0x17, 0xa4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const bytes = codec.encode(opcodes.ActivateKeypads, 405419896, {
        keypads: {
          4: true
        }
      })

      expect(bytes).to.deep.equal(msg)
    })
  })

  describe('#decode(...)', function () {
    it('should return null when decoding an invalid function code', function () {
      const msg = Buffer.from([
        0x17, 0xff, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0xff, 0xff, 0xff, 0x00,
        0xc0, 0xa8, 0x01, 0x01, 0x00, 0x12, 0x23, 0x34, 0x45, 0x56, 0x08, 0x92, 0x20, 0x20, 0x08, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.equal(null)
    })

    it('should decode get-device response', function () {
      const expected = {
        deviceId: 405419896,
        device: {
          serialNumber: 405419896,
          address: '192.168.1.100',
          netmask: '255.255.255.0',
          gateway: '192.168.1.1',
          MAC: '00:12:23:34:45:56',
          version: '0892',
          date: '2020-08-25'
        }
      }

      const msg = Buffer.from([
        0x17, 0x94, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0xff, 0xff, 0xff, 0x00,
        0xc0, 0xa8, 0x01, 0x01, 0x00, 0x12, 0x23, 0x34, 0x45, 0x56, 0x08, 0x92, 0x20, 0x20, 0x08, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode get-status response', function () {
      const expected = {
        deviceId: 405419896,
        state: {
          serialNumber: 405419896,
          event: {
            index: 71,
            type: {
              code: 1,
              event: '{{card swipe}}'
            },
            granted: false,
            door: 3,
            direction: {
              code: 1,
              direction: '{{in}}'
            },
            card: 65538,
            timestamp: '2020-08-25 10:08:40',
            reason: {
              code: 6,
              reason: '{{no access rights}}'
            }
          },
          doors: {
            1: false,
            2: false,
            3: false,
            4: false
          },
          buttons: {
            1: false,
            2: false,
            3: false,
            4: false
          },
          system: {
            status: 0,
            date: '2020-08-25',
            time: '10:08:40'
          },
          specialInfo: 0,
          relays: {
            state: 0,
            relays: { 1: false, 2: false, 3: false, 4: false }
          },
          inputs: {
            state: 0,
            forceLock: false,
            fireAlarm: false
          }
        }
      }

      const msg = Buffer.from([
        0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x47, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x01,
        0x02, 0x00, 0x01, 0x00, 0x20, 0x20, 0x08, 0x25, 0x10, 0x08, 0x40, 0x06, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x20, 0x08, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode get-listener response', function () {
      const expected = {
        deviceId: 405419896,
        address: '192.168.1.100',
        port: 60001
      }

      const msg = Buffer.from([
        0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0x64, 0x61, 0xea, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode set-listener response', function () {
      const expected = {
        deviceId: 405419896,
        updated: true
      }

      const msg = Buffer.from([
        0x17, 0x90, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode get-time response', function () {
      const expected = {
        deviceId: 405419896,
        address: '192.168.1.225',
        port: 59999
      }

      const msg = Buffer.from([
        0x17, 0x92, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xc0, 0xa8, 0x01, 0xe1, 0x5f, 0xea, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode set-time response', function () {
      const expected = {
        deviceId: 405419896,
        datetime: '2021-08-28 14:23:56'
      }

      const msg = Buffer.from([
        0x17, 0x30, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x20, 0x21, 0x08, 0x28, 0x14, 0x23, 0x56, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode get-door-control response', function () {
      const expected = {
        deviceId: 405419896,
        doorControlState: {
          door: 4,
          delay: 7,
          control: {
            value: 3,
            state: '{{controlled}}'
          }
        }
      }

      const msg = Buffer.from([
        0x17, 0x82, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x04, 0x03, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode set-door-control response', function () {
      const expected = {
        deviceId: 405419896,
        doorControlState: {
          door: 4,
          delay: 7,
          control: {
            value: 3,
            state: '{{controlled}}'
          }
        }
      }

      const msg = Buffer.from([
        0x17, 0x80, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x04, 0x03, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode open-door response', function () {
      const expected = {
        deviceId: 405419896,
        opened: true
      }

      const msg = Buffer.from([
        0x17, 0x40, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode get-cards response', function () {
      const expected = {
        deviceId: 405419896,
        cards: 16781091
      }

      const msg = Buffer.from([
        0x17, 0x58, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x23, 0x0f, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode get-card response', function () {
      const expected = {
        deviceId: 405419896,
        card: {
          number: 61532836,
          valid: {
            from: '2021-01-02',
            to: '2021-12-31'
          },
          doors: {
            1: true,
            2: 29,
            3: false,
            4: true
          },
          PIN: 0
        }
      }

      const msg = Buffer.from([
        0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa4, 0xea, 0xaa, 0x03, 0x20, 0x21, 0x01, 0x02,
        0x20, 0x21, 0x12, 0x31, 0x01, 0x1d, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode get-card response (with PIN)', function () {
      const expected = {
        deviceId: 405419896,
        card: {
          number: 61532836,
          valid: {
            from: '2021-01-02',
            to: '2021-12-31'
          },
          doors: {
            1: true,
            2: 29,
            3: false,
            4: true
          },
          PIN: 7531
        }
      }

      const msg = Buffer.from([
        0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa4, 0xea, 0xaa, 0x03, 0x20, 0x21, 0x01, 0x02,
        0x20, 0x21, 0x12, 0x31, 0x01, 0x1d, 0x00, 0x01, 0x6b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode get-card-by-index response', function () {
      const expected = {
        deviceId: 405419896,
        card: {
          number: 61532836,
          valid: {
            from: '2021-01-02',
            to: '2021-12-31'
          },
          doors: {
            1: true,
            2: 29,
            3: false,
            4: true
          },
          PIN: 0
        }
      }

      const msg = Buffer.from([
        0x17, 0x5c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa4, 0xea, 0xaa, 0x03, 0x20, 0x21, 0x01, 0x02,
        0x20, 0x21, 0x12, 0x31, 0x01, 0x1d, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode get-card-by-index response (with PIN)', function () {
      const expected = {
        deviceId: 405419896,
        card: {
          number: 61532836,
          valid: {
            from: '2021-01-02',
            to: '2021-12-31'
          },
          doors: {
            1: true,
            2: 29,
            3: false,
            4: true
          },
          PIN: 7531
        }
      }

      const msg = Buffer.from([
        0x17, 0x5c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xa4, 0xea, 0xaa, 0x03, 0x20, 0x21, 0x01, 0x02,
        0x20, 0x21, 0x12, 0x31, 0x01, 0x1d, 0x00, 0x01, 0x6b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode "not found" get-card response', function () {
      const expected = {
        deviceId: 405419896,
        card: {
          number: 0,
          valid: {
            from: '',
            to: ''
          },
          doors: {
            1: false,
            2: false,
            3: false,
            4: false
          },
          PIN: 0
        }
      }

      const msg = Buffer.from([
        0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode "deleted" get-card response', function () {
      const expected = {
        deviceId: 405419896,
        card: {
          number: 4294967295,
          valid: {
            from: '',
            to: ''
          },
          doors: {
            1: false,
            2: false,
            3: false,
            4: false
          },
          PIN: 0
        }
      }

      const msg = Buffer.from([
        0x17, 0x5a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode put-card response', function () {
      const expected = {
        deviceId: 405419896,
        stored: true
      }

      const msg = Buffer.from([
        0x17, 0x50, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode delete-card response', function () {
      const expected = {
        deviceId: 405419896,
        deleted: true
      }

      const msg = Buffer.from([
        0x17, 0x52, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode delete-cards response', function () {
      const expected = {
        deviceId: 405419896,
        deleted: true
      }

      const msg = Buffer.from([
        0x17, 0x54, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode get-time-profile response', function () {
      const expected = {
        deviceId: 405419896,
        profile: {
          id: 29,
          valid: {
            from: '2021-01-01',
            to: '2021-12-31'
          },
          weekdays: ['Monday', 'Tuesday', 'Friday'],
          segments: [
            { start: '08:30', end: '11:45' },
            { start: '13:15', end: '17:30' },
            { start: '19:05', end: '20:55' }
          ],
          linkedTo: 31
        }
      }

      const msg = Buffer.from([
        0x17, 0x98, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x1d, 0x20, 0x21, 0x01, 0x01, 0x20, 0x21, 0x12,
        0x31, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x08, 0x30, 0x11, 0x45, 0x13, 0x15, 0x17, 0x30,
        0x19, 0x05, 0x20, 0x55, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode set-time-profile response', function () {
      const expected = {
        deviceId: 405419896,
        updated: true
      }

      const msg = Buffer.from([
        0x17, 0x88, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode clear-time-profiles response', function () {
      const expected = {
        deviceId: 405419896,
        cleared: true
      }

      const msg = Buffer.from([
        0x17, 0x8a, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode clear-task-list response', function () {
      const expected = {
        deviceId: 405419896,
        cleared: true
      }

      const msg = Buffer.from([
        0x17, 0xa6, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode refresh-task-list response', function () {
      const expected = {
        deviceId: 405419896,
        refreshed: true
      }

      const msg = Buffer.from([
        0x17, 0xac, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode record-special-events response', function () {
      const expected = {
        deviceId: 405419896,
        updated: true
      }

      const msg = Buffer.from([
        0x17, 0x8e, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode get-event-index response', function () {
      const expected = {
        deviceId: 405419896,
        index: 76543
      }

      const msg = Buffer.from([
        0x17, 0xb4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xff, 0x2a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode set-event-index response', function () {
      const expected = {
        deviceId: 405419896,
        updated: true
      }

      const msg = Buffer.from([
        0x17, 0xb2, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode get-event response', function () {
      const expected = {
        deviceId: 405419896,
        event: {
          index: 73182,
          type: {
            code: 2,
            event: '{{door}}'
          },
          granted: true,
          door: 3,
          direction: {
            code: 1,
            direction: '{{in}}'
          },
          card: 6154413,
          timestamp: '2021-08-25 10:12:34',
          reason: {
            code: 6,
            reason: '{{no access rights}}'
          }
        }
      }

      const msg = Buffer.from([
        0x17, 0xb0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0xde, 0x1d, 0x01, 0x00, 0x02, 0x01, 0x03, 0x01,
        0xad, 0xe8, 0x5d, 0x00, 0x20, 0x21, 0x08, 0x25, 0x10, 0x12, 0x34, 0x06, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode event message', function () {
      const expected = {
        deviceId: 405419896,
        state: {
          serialNumber: 405419896,
          event: {
            index: 71,
            type: {
              code: 1,
              event: '{{card swipe}}'
            },
            granted: false,
            door: 3,
            direction: {
              code: 1,
              direction: '{{in}}'
            },
            card: 65538,
            timestamp: '2020-08-25 10:08:40',
            reason: {
              code: 6,
              reason: '{{no access rights}}'
            }
          },
          doors: {
            1: false,
            2: false,
            3: false,
            4: false
          },
          buttons: {
            1: false,
            2: false,
            3: false,
            4: false
          },
          system: {
            status: 0,
            date: '2020-08-25',
            time: '10:08:40'
          },
          specialInfo: 0,
          relays: {
            state: 0,
            relays: { 1: false, 2: false, 3: false, 4: false }
          },
          inputs: {
            state: 0,
            forceLock: false,
            fireAlarm: false
          }
        }
      }

      const msg = Buffer.from([
        0x17, 0x20, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x47, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x01,
        0x02, 0x00, 0x01, 0x00, 0x20, 0x20, 0x08, 0x25, 0x10, 0x08, 0x40, 0x06, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x20, 0x08, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode set-pc-control response', function () {
      const expected = {
        deviceId: 405419896,
        ok: true
      }

      const msg = Buffer.from([
        0x17, 0xa0, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode set-interlock response', function () {
      const expected = {
        deviceId: 405419896,
        ok: true
      }

      const msg = Buffer.from([
        0x17, 0xa2, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })

    it('should decode activate-keypads response', function () {
      const expected = {
        deviceId: 405419896,
        ok: true
      }

      const msg = Buffer.from([
        0x17, 0xa4, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      ])

      const object = codec.decode(new Uint8Array(msg))

      expect(object).to.deep.equal(expected)
    })
  })
})
